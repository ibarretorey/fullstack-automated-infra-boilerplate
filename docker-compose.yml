version: '3.7'

services:
  templating:
    image: ${OWNER}/templating
    build:
      context: ./microservicios/templating
      dockerfile: Dockerfile
    env_file: .env
    environment:
      TEMPLATES_DIR: /tmp/templates
      RENDERED_DIR: /tmp/rendered
    volumes:
      - ./templates:/tmp/templates
      - ./config_files:/tmp/rendered:rw

  db:
    image: mariadb:10.1
    container_name: ${PROJECT_NAME}_db_development
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "/usr/bin/mysql --host=localhost --port=3306 --user=$MYSQL_USER --password=$MYSQL_PASSWORD -e 'Select 1;'' || exit 1"]
      timeout: 10s
      retries: 15
    env_file: .env
    networks:
        - fs_network
    ports:
      - "${EXTERNAL_DB_PORT}:${DB_PORT}"
    expose:
      - 3306
    
  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
    networks:
        - fs_network

  api:
    image: ${OWNER}/${PROJECT_NAME}-api-development
    build: 
      context: ./microservicios/api
      dockerfile: Dockerfile.development
    container_name: ${PROJECT_NAME}_api_development
    restart: always
    depends_on:
      - db
    environment:
      WAIT_HOSTS: db:3306
      WAIT_HOSTS_TIMEOUT: 300
      WAIT_SLEEP_INTERVAL: 30
      WAIT_HOST_CONNECT_TIMEOUT: 30
    env_file: .env
    volumes:
      - ./microservicios/api/src:/app/src
    networks:
        - fs_network
    ports:
      - "${API_PORT}:${API_PORT}"

  dashboard:
    image: ${OWNER}/${PROJECT_NAME}-dashboard-development
    build:
      context: ./microservicios/dashboard
      dockerfile: Dockerfile.development
    env_file: .env
    container_name: ${PROJECT_NAME}_dashboard_development
    restart: unless-stopped
    ports:
      - "3000:80"
    stdin_open: true
    tty: true
    volumes:
      - ./microservicios/dashboard/src:/usr/src/app/src
      - ./microservicios/dashboard/public:/usr/src/app/public
      - ./microservicios/dashboard/tsconfig.json:/usr/src/app/tsconfig.json
    networks:
      - fs_network

  keycloak:
    image: jboss/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    restart: unless-stopped
    depends_on:
      - db
    volumes:
      - ./config_files/keycloak/standalone.xml:${JBOSS_HOME}/standalone/configuration/standalone.xml:rw
      - ./config_files/keycloak/realm-export.json:${KEYCLOAK_IMPORT}:ro
      - ./config_files/keycloak/patternfly/:${JBOSS_HOME}/themes/patternfly/:ro
    env_file: .env
    ports:
      - '8080:8080'
      - '8443:8443'
    networks:
      - fs_network

  proxy:
    image: nginx:1.15.1
    container_name: proxy
    restart: unless-stopped
    volumes:
      - ./config_files/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config_files/proxy/proxy.conf:/etc/nginx/proxy.conf:ro
      # - ./favicon.ico:/etc/nginx/favicon.ico
    ports:
      - "80:80"
      - '443:443'
    command: [nginx-debug, '-g', 'daemon off;']
    networks:
      - fs_network


networks:
  fs_network:
    driver: bridge

volumes:
  mysql_data: